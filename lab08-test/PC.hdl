CHIP PC {

    // Aout - Contents of Register A
    // I - Current Instruction 16Bit
    IN Aout[16], I[16], reset, zr, ng;

    // pcOut - Address of next instruction
    OUT pcOut[15];

    PARTS:
    /* Generating jump bit: indicates whether we load A-register into PC */
    Not(in=I[2], out=notI2);
    Not(in=I[1], out=notI1);
    Not(in=I[0], out=notI0);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    Or(a=ng, b=zr, out=LE); // Less than or equal to zero


    // JGT(0 0 1)   -   not(I2).not(I1).I0.not(ng).not(zr)
    And5(a=notI2, b=notI1, c=I[0], d=notzr, e=notng, out=JGT);

    // JEQ(0 1 0)   -   not(I2).I1.not(I0).zr
    And4(a=notI2, b=I[1], c=notI0, d=zr, out=JEQ);

    // JGE(0 1 1)   -   not(I2).I1.I0.not(ng)
    And4(a=notI2, b=I[1], c=I[0], d=notng, out=JGE);

    // JLT(1 0 0)   -   I2.not(I1).not(I0).ng.not(zr)
    And5(a=I[2], b=notI1, c=notI0, d=notzr, e=ng, out=JLT);

    // JNE(1 0 1)   -   I2.not(I1).I0.not(zr)
    And4(a=I[2], b=notI1, c=I[0], d=notzr, out=JNE);

    // JLE(1 1 0)   -   I2.I1.not(I0).LE
    And4(a=I[2], b=I[1], c=notI0, d=LE, out=JLE);

    // JMP(1 1 1)   -   I2.I1.I0
    And3(a=I[2], b=I[1], c=I[0], out=JMP);

    // Computing jump bit
    // jump = I[15].(JGT + JEQ + JGE + JLT + JNE + JLE + JMP)

    Or4(a=JGT, b=JEQ, c=JGE, d=JLT, out =t1);
    Or4(a=JNE, b=JLE, c=JMP, d=t1, out =t2);
    And(a=t2, b = I[15], out=jump);

    /* After jump bit is available */
    Mux4Way16(a=AdderOut, b=Aout, c=false, d=false, sel[1]=reset, sel[0]=jump, out=pcIn);
    Register(in=pcIn, load=true, out=pcOutCopy, out[0..14]=pcOut);
    Add16(a=pcOutCopy, b[1..15]=false, b[0]=true, s=AdderOut);
}