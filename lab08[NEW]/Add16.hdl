/* This is a 4-bit CLA based adder with higher order terms *
/* This chip supports only addition, and doesn't check for overflow */

CHIP Add16 {
    IN a[16], b[16];
    OUT s[16];

    PARTS:
    /* Lower order propogate terms => Since c0=false, s[0]=p0 */
    Xor(a=a[0], b=b[0], out=p0, out=s[0]);
    Xor(a=a[1], b=b[1], out=p1);
    Xor(a=a[2], b=b[2], out=p2);
    Xor(a=a[3], b=b[3], out=p3);
    Xor(a=a[4], b=b[4], out=p4);
    Xor(a=a[5], b=b[5], out=p5);
    Xor(a=a[6], b=b[6], out=p6);
    Xor(a=a[7], b=b[7], out=p7);
    Xor(a=a[8], b=b[8], out=p8);
    Xor(a=a[9], b=b[9], out=p9);
    Xor(a=a[10], b=b[10], out=p10);
    Xor(a=a[11], b=b[11], out=p11);
    Xor(a=a[12], b=b[12], out=p12);
    Xor(a=a[13], b=b[13], out=p13);
    Xor(a=a[14], b=b[14], out=p14);
    Xor(a=a[15], b=b[15], out=p15);

    /* Lower order generate terms => Since c0=false, c1=g0 */
    And(a=a[0], b=b[0], out=g0, out=c1);
    And(a=a[1], b=b[1], out=g1);
    And(a=a[2], b=b[2], out=g2);
    And(a=a[3], b=b[3], out=g3);
    And(a=a[4], b=b[4], out=g4);
    And(a=a[5], b=b[5], out=g5);
    And(a=a[6], b=b[6], out=g6);
    And(a=a[7], b=b[7], out=g7);
    And(a=a[8], b=b[8], out=g8);
    And(a=a[9], b=b[9], out=g9);
    And(a=a[10], b=b[10], out=g10);
    And(a=a[11], b=b[11], out=g11);
    And(a=a[12], b=b[12], out=g12);
    And(a=a[13], b=b[13], out=g13);
    And(a=a[14], b=b[14], out=g14);
    And(a=a[15], b=b[15], out=g15);

    /* Higher order propogate terms */
    And4(a=p3, b=p2, c=p1, d=p0, out=P0);
    And4(a=p7, b=p6, c=p5, d=p4, out=P1);
    And4(a=p11, b=p10, c=p9, d=p8, out=P2);

    /* Higher order propogate terms => Since c0=false, c4=G0 */
    And4(a=p3, b=p2, c=p1, d=g0, out=g0t1);
    And3(a=p3, b=p2, c=g1, out=g0t2);
    And(a=p3, b=g2, out=g0t3);
    Or4(a=g0t1, b=g0t2, c=g0t3, d=g3, out=G0, out=c4);

    And4(a=p7, b=p6, c=p5, d=g4, out=g1t1);
    And3(a=p7, b=p6, c=g5, out=g1t2);
    And(a=p7, b=g6, out=g1t3);
    Or4(a=g1t1, b=g1t2, c=g1t3, d=g7, out=G1);

    And4(a=p11, b=p10, c=p9, d=g8, out=g2t1);
    And3(a=p11, b=p10, c=g9, out=g2t2);
    And(a=p11, b=g10, out=g2t3);
    Or4(a=g2t1, b=g2t2, c=g2t3, d=g11, out=G2);

    /* Finding c8 and c12 => since we dont support overflow checking, c16 is unnecessary; also, c4 is already calculated */

    And(a=P1, b=G0, out=c8t1);
    Or(a=c8t1, b=G1, out=c8);

    And3(a=P2, b=P1, c=G0, out=c12t1);
    And(a=P2, b=G1, out=c12t2);
    Or3(a=c12t1, b=c12t2, c=G2, out=c12);

    /* First 4-bit CLA => c0=false, so c1=g0, which was calculated before */

    And(a=p1, b=g0, out=t22);
    Or(a=t22, b=g1, out=c2);

    And3(a=p2, b=p1, c=g0, out=t32);
    And(a=p2, b=g1, out=t33);
    Or3(a=t32, b=t33, c=g2, out=c3);

    /* Second 4-bit CLA */
    And(a=p4, b=c4, out=t51);
    Or(a=t51, b=g4, out=c5);

    And3(a=p5, b=p4, c=c4, out=t61);
    And(a=p5, b=g4, out=t62);
    Or3(a=t61, b=t62, c=g5, out=c6);

    And4(a=p6, b=p5, c=p4, d=c4, out=t71);
    And3(a=p6, b=p5, c=g4, out=t72);
    And(a=p6, b=g5, out=t73);
    Or4(a=t71, b=t72, c=t73, d=g6, out=c7);

    /* Third 4-bit CLA */
    And(a=p8, b=c8, out=t91);
    Or(a=t91, b=g8, out=c9);

    And3(a=p9, b=p8, c=c8, out=t101);
    And(a=p9, b=g8, out=t102);
    Or3(a=t101, b=t102, c=g9, out=c10);

    And4(a=p10, b=p9, c=p8, d=c8, out=t111);
    And3(a=p10, b=p9, c=g8, out=t112);
    And(a=p10, b=g9, out=t113);
    Or4(a=t111, b=t112, c=t113, d=g10, out=c11);

    /* Fourth 4-bit CLA */
    And(a=p12, b=c12, out=t131);
    Or(a=t131, b=g12, out=c13);

    And3(a=p13, b=p12, c=c12, out=t141);
    And(a=p13, b=g12, out=t142);
    Or3(a=t141, b=t142, c=g13, out=c14);

    And4(a=p14, b=p13, c=p12, d=c12, out=t151);
    And3(a=p14, b=p13, c=g12, out=t152);
    And(a=p14, b=g13, out=t153);
    Or4(a=t151, b=t152, c=t153, d=g14, out=c15);

    /* Calculating sum terms */
    Xor(a=p1, b=c1, out=s[1]);
    Xor(a=p2, b=c2, out=s[2]);
    Xor(a=p3, b=c3, out=s[3]);
    Xor(a=p4, b=c4, out=s[4]);
    Xor(a=p5, b=c5, out=s[5]);
    Xor(a=p6, b=c6, out=s[6]);
    Xor(a=p7, b=c7, out=s[7]);
    Xor(a=p8, b=c8, out=s[8]);
    Xor(a=p9, b=c9, out=s[9]);
    Xor(a=p10, b=c10, out=s[10]);
    Xor(a=p11, b=c11, out=s[11]);
    Xor(a=p12, b=c12, out=s[12]);
    Xor(a=p13, b=c13, out=s[13]);
    Xor(a=p14, b=c14, out=s[14]);
    Xor(a=p15, b=c15, out=s[15]);
}