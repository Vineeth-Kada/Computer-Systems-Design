CHIP OFlowSignedCSA {
    IN x, y, in[16];//here x and y are x[7] and y[7] respectively, also in[16] is the product before reducing to 8 bits
    OUT OF;//OF is the overflow
    PARTS:
    Xor(a=x, b=y, out=w1);  
    Not(in=w1, out=notw1);
    
    /* computing v1 =  (x(xNor)y).(p_n-1 + p_n + ... + p_2n-1)*/
    
    Or5Way(a=in[7], b=in[8], c=in[9], d=in[10], e=in[11], out=w2);
    Or5Way(a=in[12], b=in[13], c=in[14], d=in[15], e=w2, out=w3);
    And(a=w3, b=notw1, out=v1);
    
    /*computing v2 = (x(Xor)y).(notp_n-1 + notp_n + ... + notp_2n-1)*/
    
    And5Way(a=in[7], b=in[8], c=in[9], d=in[10], e=in[11], out=w4);
    And5Way(a=in[12], b=in[13], c=in[14], d=in[15], e=w4, out=w5); 
    Not(in=w5, out=notw5);
    
    /*computing OF = v1 + v2*/
    
    And(a=notw5, b=w1, out=v2);
    Or(a=v1, b=v2, out=OF);
}
