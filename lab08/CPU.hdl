CHIP CPU {
    IN inM[16], instruction[16], reset;
    OUT outM[16], writeM, addressM[14],pc[14];
    PARTS:
    Not(in=instruction[15], out=sel1);

    And(a=instruction[15], b=instruction[5], out=temp1);
    Or(a=temp1, b=sel1, out=ctrlSignalA);

    And(a=instruction[15], b=instruction[12], out=sel2);

    And(a=instruction[15], b=instruction[4], out=ctrlSignalD);

    And(a=instruction[15], b=instruction[3], out=writeM);
    Mux16(a=outALU, b=instruction, sel=sel1, out=inRegA);
    ARegister(in=inRegA, load=ctrlSignalA, out=outRegA);
    Mux16(a=outRegA, b=inM, sel=sel2, out=inALU2);
    DRegister(in=outALU, load=ctrlSignalD, out=inALU1);
    HackALU(x=inALU1, y=inALU2, zx=instruction[11], nx=instruction[10],zy=instruction[9], ny=instruction[8], f=instruction[7], n0=instruction[6], out=outALU, zr=zr, ng=ng);
    Xor16Bit(a=false, b=outRegA, out[0..13]=addressM);
    Xor16Bit(a=false, b=outALU, out=outM);
    PC(I=instruction, reset=reset, Aout=outRegA, zr=zr, ng=ng,outPC[0..13] = pc);
    //CLOCKED addressM, pc;
}